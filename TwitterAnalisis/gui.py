# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import tweepy
from TwitterAnalisis import *
from PyQt5 import QtCore, QtGui, QtWidgets


def connect():
    auth = tweepy.OAuthHandler(consumer_key, consumer_secret)
    auth.set_access_token(access_token, access_token_secret)
    return tweepy.API(auth)


def get_tweets(api, query, limit, max_id=None):
    tweets = tweepy.Cursor(api.search_tweets,
                           q=f'{query} -filter:retweets -filter:links exclude:replies',
                           tweet_mode='extended', lang='en', max_id=max_id).items(limit)
    return list(tweets)


class Ui_MainWindow(object):
    def __init__(self):
        super(Ui_MainWindow, self).__init__()
        self.last_id = None
        self.api = connect()

        self.query = 'covid vaccine'

        self.tweets = get_tweets(self.api, self.query, 20)

        self.save = {
            'pro': set(),
            'anty': set()
        }

        with open('pro.txt', 'r', encoding='utf-8') as pro:
            for line in pro:
                if line == '\n':
                    continue
                self.save['pro'].add(line.rstrip())
        with open('anty.txt', 'r', encoding='utf-8') as anty:
            for line in anty:
                if line == '\n':
                    continue
                self.save['anty'].add(line.rstrip())

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(295 * 2, 195 * 2)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(10 * 2, 10 * 2, 275 * 2, 128 * 2))
        self.textBrowser.setObjectName("textBrowser")
        font = self.textBrowser.currentFont()
        font.setPointSize(18)
        self.textBrowser.setFont(font)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(15 * 2, 140 * 2, 85 * 2, 23 * 2))
        self.pushButton.setObjectName("Pro")
        self.pushButton.clicked.connect(self.pro)
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(105 * 2, 140 * 2, 85 * 2, 23 * 2))
        self.pushButton_2.setObjectName("Anty")
        self.pushButton_2.clicked.connect(self.anty)
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(195 * 2, 140 * 2, 85 * 2, 23 * 2))
        self.pushButton_3.setObjectName("Skip")
        self.pushButton_3.clicked.connect(self.skip)

        self.counter1 = QtWidgets.QLCDNumber(MainWindow)
        self.counter1.setGeometry(QtCore.QRect(20 * 2, 165 * 2, 75 * 2, 23 * 2))
        self.counter1.display(len(self.save['pro']))
        self.counter2 = QtWidgets.QLCDNumber(MainWindow)
        self.counter2.setGeometry(QtCore.QRect(110 * 2, 165 * 2, 75 * 2, 23 * 2))
        self.counter2.display(len(self.save['anty']))

        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "Pro"))
        self.pushButton_2.setText(_translate("MainWindow", "Anty"))
        self.pushButton_3.setText(_translate("MainWindow", "Skip"))
        self.next()

    def closeEvent(self, event):
        with open('pro.txt', 'w', encoding='utf-8') as pro:
            for x in self.save['pro']:
                print(x, file=pro)
        with open('anty.txt', 'w', encoding='utf-8') as anty:
            for x in self.save['anty']:
                print(x, file=anty)

    def counter_update(self):
        self.counter1.display(len(self.save['pro']))
        self.counter2.display(len(self.save['anty']))

    def next(self):
        tweet = self.tweets.pop(0)
        last_id = tweet.id
        if not self.tweets:
            self.tweets = get_tweets(self.api, self.query, 20, last_id)
            self.tweets.pop(0)
        content: str
        content = tweet.full_text
        content = content.replace('\n', ' ')
        content = content.encode('utf-8', 'ignore').decode()
        self.textBrowser.setText(content)
        self.counter_update()

    def pro(self):
        self.save['pro'].add(self.textBrowser.toPlainText())
        self.next()

    def anty(self):
        self.save['anty'].add(self.textBrowser.toPlainText())
        self.next()

    def skip(self):
        self.next()


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    MainWindow.closeEvent = lambda e: ui.closeEvent(e)
    sys.exit(app.exec_())
